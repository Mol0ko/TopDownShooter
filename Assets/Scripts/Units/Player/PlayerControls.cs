//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Units/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TopDownShooter
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Unit"",
            ""id"": ""f2f2e577-3e18-42c8-8b71-2023d78ebd0f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2d85d40a-b644-4f28-9a65-20d94fc7c257"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1d7d78f6-3a3d-4c74-b5d1-411b15635c25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""408faee0-8689-49e5-a815-c85af26782c4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b080fc1e-a562-4c30-9b25-92e9d186cb23"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6f61062f-dca5-49cb-9a02-13bdb5b0a72c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9f4d3e59-2d1d-436f-a404-01922321ceb8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""33259083-fa9c-4ee2-8502-ad1686d78102"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""118774e4-26e6-4c7c-b136-03689f87d875"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SafeOpen"",
            ""id"": ""5ebe3b4f-ff52-467c-ac44-01d900d96e05"",
            ""actions"": [
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""9bfd9023-09a4-43eb-af72-1f2ff488cb14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9183446-2246-4412-b6d4-bc5e540bbb40"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Unit
            m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
            m_Unit_Move = m_Unit.FindAction("Move", throwIfNotFound: true);
            m_Unit_Attack = m_Unit.FindAction("Attack", throwIfNotFound: true);
            // SafeOpen
            m_SafeOpen = asset.FindActionMap("SafeOpen", throwIfNotFound: true);
            m_SafeOpen_Push = m_SafeOpen.FindAction("Push", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Unit
        private readonly InputActionMap m_Unit;
        private IUnitActions m_UnitActionsCallbackInterface;
        private readonly InputAction m_Unit_Move;
        private readonly InputAction m_Unit_Attack;
        public struct UnitActions
        {
            private @PlayerControls m_Wrapper;
            public UnitActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Unit_Move;
            public InputAction @Attack => m_Wrapper.m_Unit_Attack;
            public InputActionMap Get() { return m_Wrapper.m_Unit; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
            public void SetCallbacks(IUnitActions instance)
            {
                if (m_Wrapper.m_UnitActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnMove;
                    @Attack.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnAttack;
                }
                m_Wrapper.m_UnitActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                }
            }
        }
        public UnitActions @Unit => new UnitActions(this);

        // SafeOpen
        private readonly InputActionMap m_SafeOpen;
        private ISafeOpenActions m_SafeOpenActionsCallbackInterface;
        private readonly InputAction m_SafeOpen_Push;
        public struct SafeOpenActions
        {
            private @PlayerControls m_Wrapper;
            public SafeOpenActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Push => m_Wrapper.m_SafeOpen_Push;
            public InputActionMap Get() { return m_Wrapper.m_SafeOpen; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SafeOpenActions set) { return set.Get(); }
            public void SetCallbacks(ISafeOpenActions instance)
            {
                if (m_Wrapper.m_SafeOpenActionsCallbackInterface != null)
                {
                    @Push.started -= m_Wrapper.m_SafeOpenActionsCallbackInterface.OnPush;
                    @Push.performed -= m_Wrapper.m_SafeOpenActionsCallbackInterface.OnPush;
                    @Push.canceled -= m_Wrapper.m_SafeOpenActionsCallbackInterface.OnPush;
                }
                m_Wrapper.m_SafeOpenActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Push.started += instance.OnPush;
                    @Push.performed += instance.OnPush;
                    @Push.canceled += instance.OnPush;
                }
            }
        }
        public SafeOpenActions @SafeOpen => new SafeOpenActions(this);
        public interface IUnitActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
        }
        public interface ISafeOpenActions
        {
            void OnPush(InputAction.CallbackContext context);
        }
    }
}
